// Global variables:
var fighter: Krieger = Krieger("Alexios the fighter", 200, 200)
var mermaid: Meerjungfrau = Meerjungfrau("Nika the Mermaid", 100, 100)
var magician: Magier = Magier("DoDo The Healer", 150, 150)
var finalBoss: Endgegner = Endgegner("Aeron The dark magician", 500)
var helper: Helfer = Helfer("Phobus the dragon", 200)
var herosTeam: MutableList<Held> = mutableListOf(fighter, mermaid, magician)
var randomHero: Held = herosTeam.random()
val bag: Beutel = Beutel()
var bagUsedThisRound = false
var round: Int = 1
var finalBossBreak = 0


//Text Formatting:
const val red = "\u001B[31m"
const val green = "\u001B[32m"
const val blue = "\u001B[34m"
const val yellow = "\u001B[33m"
const val reset = "\u001B[0m"
const val bold = "\u001B[1m"
const val magenta = "\u001B[35m"
const val cyan = "\u001B[36m"
const val underline = "\u001B[4m"

// print intro Message about the logic of the game
fun instructions() {

    println(
        """
        "${red}Golden Syntax${reset}" is an immersive RPG where players 
        command a diverse hero team to conquer the 
        challenges within the Cursed Citadel. The game 
        follows a turn-based combat system, allowing players 
        to strategically unleash a variety of attacks and 
        abilities against their adversaries.
        
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Hero Abilities${reset}: Each hero in your team possesses four  
        distinct abilities. These can range from powerful  
        attacks to strategic support moves. Experiment with
        different combinations to find the most effective 
        tactics against the enemies.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Final Boss Dynamics${reset}: The ultimate goal is to defeat  
        the final boss, Aeron the Dark Magician, and his 
        formidable ally, Phobus the Dragon. As Aeron's health
        diminishes, he calls upon Phobus, introducing a new 
        phase in the battle. Players must adapt their strategies 
        to overcome both adversaries.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Dynamic Enemy Responses${reset}: Aeron and Phobus
        respond dynamically to the heroes' actions. Pay 
        attention to their attacks and adjust your tactics  
        accordingly. Some attacks may have special effects or 
        trigger specific events, adding depth to the gameplay.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Strategic Healing${reset}: Managing the team's health is  
        crucial. Utilize the healing abilities wisely, either during 
        specific phases or when facing intense enemy  
        assaults. Timing is key to ensure the heroes endure the challenges ahead.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Dragon Showdown${reset}:  When Phobus the Dragon enters 
        the battle, focus on coordinated attacks to weaken 
        and defeat the colossal creature. Once Phobus falls,  
        redirect your attention to the weakened Aeron to secure victory.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        ${bold}${red}Outcome Determination${reset}: The game's outcome hinges  
        on strategic decisions and well-timed actions. A  
        victorious battle yields progression through the story,
        while defeat may prompt players to refine their  
        strategies and retry the encounter.
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

    println(
        """
        "${bold}${red}Golden Syntax${reset}" challenges players to think tactically,  
        adapt to evolving battle scenarios, and uncover the 
        synergy among their heroes to triumph over the dark
        forces within the Cursed Citadel. May your strategies  
        be sharp, and your team emerge victorious in this epic RPG adventure!
        _______________________________________
        
    """.trimIndent()
    )
    Thread.sleep(2000)

}

// print final battle-welcoming Message
fun welcome(held1: Held, held2: Held, held3: Held, finalBoss: Gegner, helper: Gegner) {

    // The *text* generated by "Chat-GPT"

    println(
        """
        
                     „${yellow}Golden Syntax${reset}“ 
                    ${red}THE FINAL BATTLE${reset}
                   ${bold}${magenta}${underline}The Cursed Citadel${reset}
                   
                 ---------------------
        .

    """.trimIndent()
    )

    println(
        """
        
        In the world of "Golden Syntax," our formidable hero team, led by the 
        valiant Alexios the Fighter, has traversed through treacherous
        landscapes, solved intricate puzzles, and conquered formidable
        dungeons. Now, they stand before the imposing gates of the Cursed
        Citadel, the lair of the malevolent sorcerer, Aeron the Dark Magician, and
        his fearsome ally, Phobus the Dragon. Legends speak of their dark
        powers and the unspeakable creatures that guard the inner sanctum.
        
        --------------------------------
    """.trimIndent()
    )

    Thread.sleep(5000)
    println(
        """
            
        As the team steps into the foreboding entrance, the air 
        becomes thick with an otherworldly aura. The walls 
        pulse with ominous energy, and eerie whispers echo 
        through the corridors. The heroes' hearts pound with 
        anticipation as they approach the chamber of Aeron and Phobus.
        
        --------------------------------
    """.trimIndent()
    )
    Thread.sleep(3000)

    println(
        """
            
        Alexios the Fighter, wielding his mighty sword, takes 
        the lead. By his side is Nika the Mermaid, her 
        shimmering tail ready for swift underwater maneuvers. 
        DoDo the Healer follows closely, staff in hand, 
        prepared to mend the wounds of her companions
        
        --------------------------------
    """.trimIndent()
    )
    Thread.sleep(3000)

    println(
        """
            
        Aeron the Dark Magician, draped in shadowy robes, 
        face. Beside him, Phobus the Dragon unfurls his 
        massive wings, filling the chamber with an intimidating
        presence. Aeron raises his staff, and the ground 
        trembles beneath the heroes' feet. The final battle is about to commence.
        
        --------------------------------
    """.trimIndent()
    )
    Thread.sleep(5000)

    println(
        """
        
                         ${bold}${magenta}${underline}The Cursed Citadel${reset}
        
                        --------------------

                        
        Hero Name: ${blue}${held1.name}${reset}    Hero Name: ${blue}${held2.name}${reset}
        HP Points: ${green}${held1.hp}${reset}                  HP Points: ${green}${held2.hp}${reset}
                    Hero Name: ${blue}${held3.name}${reset}
                         HP Points: ${green}${held3.hp}${reset}
                    
                        --------------------    
                         
             Final Boss: ${yellow}${finalBoss.name}${reset} , ${green}${finalBoss.hp}${reset} HP
                 Helper: ${yellow}${helper.name}${reset} , ${green}${helper.hp}${reset} HP
    
    """.trimIndent()
    )
    println("--------------------")
    Thread.sleep(3000)
}

// Print separator line with hero name after each Turn
fun printSeparatorInfoLines(held: Held) {
    Thread.sleep(1000)
    println("\n     ###############################################")
    println("     ###############################################")
    println("     ##########   '${blue}${held.name}${reset}'   ##########")
    println("     #################### '${yellow}IS${reset}' #####################")
    println("     ########## '${red}Preparing for the fight${reset}' ##########")
    println("     ###############################################")
    println("     ###############################################")
    Thread.sleep(4000)
    println()
}

//Print the hero info during his turn
fun printInfoHeroBattle(held: Held) {
    if (held.hp < 0) {
        held.hp = 0
    }
    println("--------------------")
    println("HP : ${green}${held.hp}${reset}")
    bag.printItemsLeft()
    bagStatus()
    bag.printBagItems()
    println("--------------------")
    Thread.sleep(1000)
}

// print The hero info after finishing the game
fun printInfoHero(held: Held) {
    if (held.hp < 0) {
        held.hp = 0
    }
    println("--------------------")
    println("Name : ${blue}${held.name}${reset}")
    println("HP : ${green}${held.hp}${reset}")
    println("--------------------")
    Thread.sleep(2000)
}

// print The enemy info after finishing the game
fun printInfoEnemy(gegner: Gegner) {
    if (gegner.hp < 0) {
        gegner.hp = 0
    }
    println("--------------------")
    println("Name : ${yellow}${gegner.name}${reset}")
    println("HP : ${green}${gegner.hp}${reset}")
    println("--------------------")
    Thread.sleep(2000)
}

// the attack menu for the fighter
fun attackKrieger(): Int {
    while (true) {
        Thread.sleep(1000)
        println(
            """
                                 :: Choose an Attack ::
        
              1: ${blue}Uppercut attack${reset}                        3: ${blue}Archery attack${reset} 
               Damage Point: ${red}30${reset}                     Damage Point: ${red}10${reset} - ${red}70${reset} 
            
              2: ${blue}Sword attack${reset}                            4: ${blue}Stomp attack${reset} 
            Damage Point: ${red}20${reset} - ${red}45${reset}            Damage Point: ${red}15${reset} And it will be raised every round
            
            
                            5: ${blue}Use the bag for Random Healing Item${reset}
                      ${red}info${reset} : bag can be used only ${underline}one time in the ${red}round${reset}.

                            :Please enter your choice from ${red}1${reset} to ${red}5${reset}:
    """.trimIndent()
        )
        try {
            val input: Int = readln().toInt()

            Thread.sleep(1000)

            return when (input) {
                1 -> fighter.uppercutAttack()
                2 -> fighter.swordAttack()
                3 -> fighter.archeryAttack()
                4 -> fighter.stompAttack()
                5 -> {
                    if (!bagUsedThisRound) {
                        bagUsedThisRound = true
                        bag.use(fighter)
                        return 0
                    } else {
                        println("${red}Warning${reset} The bag is already used in this ${red}round${reset}.\n")
                    }
                    continue
                }

                else -> {
                    Thread.sleep(1000)

                    println("Invalid input. Please choose a number from ${red}1${reset} to ${red}5${reset}.\n")
                    continue
                }
            }
        } catch (e: NumberFormatException) {

            Thread.sleep(1000)

            println("Invalid input. Please enter a valid number. ${red}${e.message}${reset}\n")
        }
    }
}

// the attack menu for the Mermaid
fun attackMeerjungfrau(): Int {
    Thread.sleep(1000)
    while (true) {
        println(
            """
                                  :: Choose an Attack ::
        
              1: ${blue}Scream Attack${reset}                       3: ${blue}Trident attack${reset}  
                Damage Point: ${red}25${reset}                         Damage Point: ${red}10${reset} - ${red}50${reset}  
            
              2: ${blue}watter attack${reset}                          4: ${blue}Stinky mud attack${reset}  
            Damage Point: ${red}20${reset} - ${red}30${reset}            Damage Point: ${red}5${reset} And it will be raised every round
            
            
                            5: ${blue}Use the bag for Random Healing Item${reset}
                      ${red}info${reset} : bag can be used only ${underline}one time in the ${red}round${reset}.

                            :Please enter your choice from ${red}1${reset} to ${red}5${reset}:
    """.trimIndent()
        )
        try {
            val input: Int = readln().toInt()

            Thread.sleep(1000)

            return when (input) {
                1 -> mermaid.screamAttack()
                2 -> mermaid.watterAttack()
                3 -> mermaid.tridentAttack()
                4 -> mermaid.stinkyAttack()
                5 -> {
                    if (!bagUsedThisRound) {
                        bagUsedThisRound = true
                        bag.use(mermaid)
                        return 0
                    } else {
                        println("${red}Warning${reset} The bag is already used in this ${red}round${reset}.\n")
                    }
                    continue

                }

                else -> {
                    Thread.sleep(1000)

                    println("Invalid input. Please choose a number from ${red}1${reset} to ${red}5${reset}.\n")
                    continue
                }
            }
        } catch (e: NumberFormatException) {

            Thread.sleep(1000)

            println("Invalid input. Please enter a valid number. ${red}${e.message}${reset}\n")
        }
    }
}

// the attack menu for the Healer
fun attackMagier(): Int {
    Thread.sleep(1000)
    while (true) {
        println(
            """
                                  :: Choose an Attack ::
       
              1: ${blue}Magic ball Attack${reset}            3: ${blue}Invisibility Attack${reset}
                 Damage Point: ${red}30${reset}                Damage Point: ${red}10${reset} - ${red}40${reset}
            
              2: ${blue}self Heal${reset}                     4: ${blue}Healing a random teammate${reset}
            Healing Point: ${red}10${reset} - ${red}30${reset}                Healing Point: ${red}10${reset} - ${red}40${reset}
            
            
                         5: ${blue}Use the bag for Random Healing Item${reset}
                     ${red}info${reset} : bag can be used only ${underline}one time in the ${red}round${reset}.

                         :Please enter your choice from ${red}1${reset} to ${red}5${reset}:
    """.trimIndent()
        )
        try {
            val input: Int = readln().toInt()

            Thread.sleep(1000)

            return when (input) {
                1 -> magician.magicBallAttack()
                2 -> magician.selfHealing()
                3 -> magician.invisibilityAttack()
                4 -> magician.healingRandomTeammate(herosTeam)
                5 -> {
                    if (!bagUsedThisRound) {
                        bagUsedThisRound = true
                        bag.use(magician)
                        return 0
                    } else {
                        println("${red}Warning${reset} The bag is already used in this ${red}round${reset}.\n")
                    }
                    continue

                }

                else -> {
                    Thread.sleep(1000)

                    println("Invalid input. Please choose a number from ${red}1${reset} to ${red}5${reset}.\n")
                    continue
                }
            }
        } catch (e: NumberFormatException) {

            Thread.sleep(1000)

            println("Invalid input. Please enter a valid number. ${red}${e.message}${reset}\n")
        }
    }
}

// Subtract the enemy health after the hero attack logic
fun heroPerformAttack(hero: Held, enemy: Gegner): Int {
    val damage: Int = when (hero) {
        is Krieger -> attackKrieger()
        is Magier -> attackMagier()
        is Meerjungfrau -> attackMeerjungfrau()
        else -> 0
    }
    enemy.hp -= damage
    return damage
}

// Subtract the hero health after the enemy attack logic
fun enemyPerformAttack(enemy: Gegner, hero: Held): Int {
    val damage: Int = when (enemy) {
        is Endgegner -> enemy.endgegnerRandomAttack()
        is Helfer -> enemy.helperRandomAttack()
        else -> 0
    }
    hero.hp -= damage
    return damage
}

// The fight logic, when the helper being summoned
fun helperTurn(): Boolean {

    println(
        """
        |
        |      ${bold}${yellow}${underline}${finalBoss.name}${reset} 
        |
        |       lost A lot of his ${red}HP${reset}
        |   He needs some time to recover
        |  
        |       but the Loyal helper
        |        ${bold}${yellow}${helper.name}${reset}
        |    came to Protect his master
        |    
        |  
        |     ''${bold}${yellow}${underline}${finalBoss.name}${reset} 
        | will increase his HP with ${green}5${reset} points 
        |  for each round The ${bold}${red}${underline}helper${reset} is alive''
        |
    """.trimMargin()
    )
    println("--------------------")
    Thread.sleep(3000)

    for (hero in herosTeam) {
        if (hero.hp > 1) {
            printSeparatorInfoLines(hero)
            printInfoHeroBattle(hero)

            val heroAttackResult: Int = heroPerformAttack(hero, helper)

            if (heroAttackResult == 0) {
                println("${bold}${blue}${underline}${hero.name}${reset} used a healing item , need some rest and can't attack this round.")
                println("--------------------")
                Thread.sleep(1000)
                continue
            }
            println("--------------------")
            if (helper.hp < 0) {
                helper.hp = 0
            }
            println("\n${yellow}${bold}${underline}${helper.name}${reset} has ${green}${helper.hp}${reset} HP left...\n")
            println("--------------------")
            Thread.sleep(1000)

            if (helper.hp >= 1) {
                enemyPerformAttack(helper, hero)
                if (hero.hp <= 0) {
                    hero.hp = 0
                    println("--------------------")
                    println("\n${bold}${blue}${underline}${hero.name}${reset} is ${red}dead${reset}\n")
                    println("--------------------")
                    return false
                }

                println("--------------------")
                println("\n${bold}${blue}${underline}${hero.name}${reset} has ${green}${hero.hp}${reset} HP left...\n")
                println("--------------------")
                Thread.sleep(1000)
            } else {
                println("--------------------")
                println("\n${bold}${yellow}${underline}${helper.name}${reset} is ${red}dead${reset}\n")
                println("--------------------")
                Thread.sleep(1000)

                println(
                    "\n${bold}${yellow}${underline}${finalBoss.name}${reset} Came back stronger than before " +
                            "''${green}${finalBoss.hp}${reset} HP''.\n he is ready to fight Again\n"
                )
                println("--------------------")
                return false
            }
            Thread.sleep(1000)
        }
    }
    return true
}

//The fight logic with the final boss
fun heroTurn(hero: Held, enemy: Gegner): Boolean {
    if (hero.hp > 1) {
        printSeparatorInfoLines(hero)
        printInfoHeroBattle(hero)

        val heroAttackResult: Int = heroPerformAttack(hero, enemy)

        if (heroAttackResult == 0) {
            println("${bold}${blue}${underline}${hero.name}${reset} used a healing item , need some rest and can't attack this round.")
            println("--------------------")
            Thread.sleep(1000)
            return true
        }

        println("--------------------")
        if (enemy.hp < 0) {
            enemy.hp = 0
        }
        println("\n${yellow}${bold}${underline}${enemy.name}${reset} has ${green}${enemy.hp}${reset} HP left...\n")
        println("--------------------")
        Thread.sleep(1000)

        if (enemy.hp >= 1) {
            enemyPerformAttack(enemy, hero)
            if (hero.hp <= 0) {
                hero.hp = 0
                println("--------------------")
                println("\n${bold}${blue}${underline}${hero.name}${reset} is ${red}dead${reset}\n")
                println("--------------------")
                return true
            }

            println("--------------------")
            println("\n${bold}${blue}${underline}${hero.name}${reset} has ${green}${hero.hp}${reset} HP left...\n")
            println("--------------------")
            Thread.sleep(1000)
        } else {
            println("--------------------")
            println("\n${yellow}${bold}${underline}${enemy.name}${reset} is ${red}dead${reset}\n")
            println("--------------------")
            return false
        }
        Thread.sleep(1000)
    }
    return true
}

//Print summary after the wining
fun gameSummaryWin() {
    Thread.sleep(1000)

    // The *text* generated by "Chat-GPT"
    println(
        """
    ${green}!!Triumphant Heroes!!${reset}

    In the heart of the Cursed Citadel, a fierce battle unfolded. The echoes
    of clashing swords and the roars of a mighty dragon resonated through the 
    ancient halls.

    Alexios the Fighter, Nika the Mermaid, and DoDo the Healer, guided by your 
    strategic brilliance, faced the dark magician Aeron and his fearsome ally, 
    Phobus the Dragon.

    As the final blows were struck, a radiant light pierced the darkness. The 
    malevolent duo lay defeated, their dark powers shattered. The villagers 
    are free from the shadowy curse that plagued them.

    The once-menacing fortress now stands as a testament to your heroism. The 
    people rejoice, and the land begins to heal from the long oppression.

    You, the valiant champion of "Golden Syntax," have not just won a battle; 
    you have rewritten the destiny of this realm. Your name shall be eternally
    sung in tales, a beacon of hope in a world once overshadowed by darkness.

    ${bold}Congratulations, Victorious Adventurer!${reset}
    """
    )

    Thread.sleep(2000)
    println("Game over! ${green}You won${reset}.\n")
    Thread.sleep(1000)
    println(
        """
        
        Game summary: 
        
        you played: $round ${magenta}Round${reset}.
        
    """.trimIndent()
    )
    Thread.sleep(1000)
    printInfoHero(fighter)
    printInfoHero(mermaid)
    printInfoHero(magician)
    printInfoEnemy(finalBoss)
    printInfoEnemy(helper)

}

//Print summary after the losing
fun gameSummaryLose() {
    Thread.sleep(1000)

    // The *text* generated by "Chat-GPT"
    println(
        """
    ${red}!!A Valiant Effort!!${reset}

    Alas, the Cursed Citadel stands unwavering against the onslaught of 
    heroes. The dark magician Aeron and his formidable ally, Phobus the 
    Dragon, proved too mighty to overcome.

    Alexios the Fighter, Nika the Mermaid, and DoDo the Healer fought 
    valiantly, guided by your strategic acumen. Yet, the forces of darkness 
    prevailed, casting a somber shadow over the realm.

    The villagers, now left in despair, continue to suffer under the 
    malevolent rule of Aeron and his draconian companion. The once-hopeful 
    land succumbs to an eternal night.

    Fear not, brave adventurer, for even in defeat, your legacy endures. 
    Tales of your bravery will echo through time, inspiring future 
    generations to rise against the darkness.

    ${bold}Though the battle was lost, your spirit remains unbroken.${reset}
    """
    )

    Thread.sleep(2000)
    println("Game over! ${red}You lost${reset}.")
    Thread.sleep(1000)
    println(
        """
        
        Game summary: 
        
        you played: $round ${magenta}Round${reset}.
        
    """.trimIndent()
    )
    Thread.sleep(1000)
    printInfoHero(fighter)
    printInfoHero(mermaid)
    printInfoHero(magician)
    printInfoEnemy(finalBoss)
    printInfoEnemy(helper)

}

//Function to increase the Health of the final boss
fun increaseBossHealth() {
    finalBoss.hp += finalBossBreak
}

//The main logic of the game
fun gameLogic() {

    println(
        "\n\nWelcome to „${yellow}Golden Syntax${reset}“ !\n\n${bold}Would you like to read the instructions before you start the game?" +
                "${reset}\n\n(Press '${red}y${reset}' for yes or Press '${red} Enter${reset}' to Skip)\n"
    )
    val input: String = readln().lowercase()

    if (input == "y") {
        println()
        instructions()
        println()
        println("${bold}Press Enter to start the game...${reset}")
        readln()
    }


    welcome(fighter, mermaid, magician, finalBoss, helper)


    while (herosTeam.any { it.hp > 1 } && finalBoss.hp > 1) {


        println("\n${magenta}Round${reset} $round : \n")
        println("--------------------")
        Thread.sleep(1000)

        bagUsedThisRound = false

        when {
            finalBoss.hp <= 250 && helper.hp > 1 -> {

                increaseBossHealth()

                helperTurn()

                round++
                finalBossBreak += 5

                continue
            }

            finalBoss.hp >= 1 -> {


                if (!heroTurn(fighter, finalBoss))
                    break

                if (!heroTurn(mermaid, finalBoss))
                    break

                if (!heroTurn(magician, finalBoss))
                    break
            }
        }
        round++
    }

    if (herosTeam.any { it.hp > 0 }) {
        gameSummaryWin()
    } else {
        gameSummaryLose()
    }
}

//Function to reset the variables to the original value after repeating the game
fun resetGame() {
    fighter = Krieger("Lamar the fighter", 200, 200)
    mermaid = Meerjungfrau("Nika the Mermaid", 100, 100)
    magician = Magier("DoDo The Healer", 150, 150)
    finalBoss = Endgegner("Aeron The dark magician", 500)
    helper = Helfer("Phobus the dragon", 200)
    herosTeam = mutableListOf(fighter, mermaid, magician)
    bag.reset()
    round = 1
    finalBossBreak = 0
}

//Interactive function to ask the user if you want to replay the game
fun gameReplay(): Boolean {
    while (true) {
        try {
            println("Do you want to Play Again? ('y' for Yes 'n' for No)")

            val userInput: String = readln().lowercase()

            if (userInput == "y" || userInput == "n") {
                resetGame()
                return userInput == "y"
            } else {
                throw IllegalArgumentException("Invalid input. Please enter 'y' for Yes 'n' for No.")
            }
        } catch (e: Exception) {
            println("Error: ${e.message}")
        }
    }
}

//Function to check if the bag being used in the round or not
fun bagStatus() {
    if (bagUsedThisRound)
        println("Bag status : ${red}is already used this round${reset}.")
    else {
        println("Bag status : ${green}is not used this round yet${reset}.")
    }
}

